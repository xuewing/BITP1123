//List.h
//Declaration of class list

#ifndef LIST_H
#define LIST_H

template <class DataType>
class List
{
private:
	class Node
	{
	public:
		DataType data;
		Node* link;
	};

	
	Node* pHead;
	Node* pCurr;
	Node* pTail;
	int numItem;

public:
	List();
	~List();
	void AddInMiddle();
	void printData();
	int numOfItem();
};
#endif

//Define the implementation of all methods in class List

template <class DataType>
List<DataType>::List()
{
	numItem = 0;
	pHead = 0;
	pTail = NULL;
}

template <class DataType>
List<DataType>::~List() {}

template <class DataType>
void List<DataType>::AddInMiddle()
{
	DataType item;
	Node* pNew = new Node;
	cout << "Enter data: ";
	cin >> item;
	pNew->data = item;
	pNew->link = NULL;
	if (pHead == NULL)
	{
		pHead = pNew;
		pTail = pNew;
	}
	else
	{
		pTail->link = pNew;
		pTail = pTail->link;
	}
	numItem++;
}

template<class DataType>
void List<DataType>::printData()
{
	pCurr = pHead;
	while (pCurr != 0)
	{
		cout << pCurr->data << " ";
		pCurr = pCurr->link;
	}
	cout << "\n";
}

template <class DataType>
int List<DataType>::numOfItem()
{
	return numItem;
}
// ListMain.cpp

#include <iostream>
#include<string>
using namespace std;
#include "List.h"

void main()
{
	List<char>x;
	for (int i = 1; i < 4; i++)
	{
		x.AddInMiddle();
	}
	cout << "\nNumber of item Now: " << x.numOfItem();
	cout << "\nThe list are: " << endl;
	x.printData();
}
