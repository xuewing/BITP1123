//Stack.h

#ifndef STACK_H
#define STACK_H

const int maxSize = 10;

template <class myData>
class Stack
{
public:
	Stack();
	~Stack();
	void Push(myData);
	void Pop();
	myData TopStack();
	bool Underflow();
	bool Overflow();

private:
	int Top;
	myData myArray[maxSize];
};
#endif

template <class myData>
Stack<myData>::Stack()
{
	Top = -1;
}

template <class myData>
Stack<myData>::~Stack()
{}

template <class myData>
void Stack<myData>::Push(myData item)
{
	Top++;
	myArray[Top] = item;
}

template <class myData>
void Stack<myData>::Pop()
{
	Top--;
}

template <class myData>
myData Stack<myData>::TopStack()
{
	return myArray[Top];
}

template <class myData>
bool Stack<myData>::Underflow()
{
	return(Top == -1);
}

template <class myData>
bool Stack<myData>::Overflow()
{
	return(Top == maxSize - 1);
}

//Main.cpp

#include<iostream>
#include<cmath>
#include<string>
using namespace std;
#include"Stack.h" 

int main()
{
	Stack<char> StackItem;
	int index = 0;
	char exp[50], top;

	cout << "Enter an arithmetic expression: ";
	cin.getline(exp, 50);
	while (index < strlen(exp))
	{
		if (exp[index] == '(')
			StackItem.Push(exp[index]);
		else if (exp[index] == ')')
		{
			top = StackItem.TopStack();
			while (top != '(')
			{
				cout << top;
				StackItem.Pop();
				top = StackItem.TopStack();
			}
		}
		else if ((exp[index] == '+') || (exp[index] == '-'))
		{
			while (!StackItem.Underflow() && (StackItem.TopStack() != '('))
			{
				cout << StackItem.TopStack();
				StackItem.Pop();
			}
			StackItem.Push(exp[index]);
		}
		else if ((exp[index] == '*') || (exp[index] == '/') || (exp[index] == '%'))
		{
			top = StackItem.TopStack();
			if (!StackItem.Underflow() || ((top == '+') || (top == '-')))
			{
				StackItem.Push(exp[index]);
			}
			else
			{
				cout << StackItem.TopStack();
				StackItem.Pop();
				StackItem.Push(exp[index]);
			}
		}
		else
			cout << exp[index];
		index++;
	}
	while (!StackItem.Underflow())
	{
		if (StackItem.TopStack() != '(')
			cout << StackItem.TopStack();
		StackItem.Pop();
	}
	cout << endl;
}
