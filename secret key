//StackLL.h

#ifndef STACKLL_H
#define STACKLL_H

template <class MyData>
struct Nod
{
	MyData data;
	Nod <MyData>* next;
};

template <class MyData>
class StackLL
{
private:
	int count;
	Nod <MyData>* top;
public:
	StackLL();
	void Push(MyData);
	void Pop();
	bool Empty();
	MyData TopStack();
};

template <class MyData>
StackLL <MyData>::StackLL()
{
	top = NULL;
	count = 0;
}

template <class MyData>
bool StackLL<MyData>::Empty()
{
	return (count == 0);
}

template <class MyData>
MyData StackLL <MyData>::TopStack()
{
	if (Empty())
		return -1;
	else
		return top->data;
}

template <class MyData>
void StackLL <MyData>::Push(MyData value)
{
	Nod <MyData>* T = new Nod <MyData>;
	T->data = value;
	T->next = top;
	top = T;
	count++;
}

template<class MyData>
void StackLL <MyData>::Pop()
{
	if (!Empty())
	{
		Nod <MyData>* temp = top;
		top = top->next;
		delete temp;
		count--;
	}
}
#endif;

//StackLL.cpp

#include <iostream>
using namespace std;
#include "StackLL.h";

int main()
{
	StackLL <char> myStack1;
	StackLL <char> myStack2;
	char i;
	char data[10] = { 'I','W','T','Q','G','M','C','P','V','I' };

	for ( int j=9; j>=0;j--)
	{
		if ((j+1)%2!=0)
			myStack1.Push(data[j] - 2);
		else
			myStack2.Push(data[j] - 4);
	}
	cout << "The encoded message is:";
	for (int i = 0; i < 10; i++)
	{
		cout << data[i];
	}

	cout << "\nThe decoded message is:";
	for (int i = 0; i < 10; i++)
	{
		myStack1.TopStack();
		myStack1.Pop();
	}

	for (int i = 0; i < 10; i++)
	{
		myStack2.TopStack();
		myStack2.Pop();
	}

}
